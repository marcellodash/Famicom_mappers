// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2017 14:14:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UNROM_mst
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UNROM_mst_vlg_sample_tst(
	cpu_a14,
	cpu_d,
	Ncpu_rom_cs,
	Ncpu_rw,
	sampler_tx
);
input  cpu_a14;
input [3:0] cpu_d;
input  Ncpu_rom_cs;
input  Ncpu_rw;
output sampler_tx;

reg sample;
time current_time;
always @(cpu_a14 or cpu_d or Ncpu_rom_cs or Ncpu_rw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UNROM_mst_vlg_check_tst (
	prg_a14,
	prg_a15,
	prg_a16,
	prg_a17,
	sampler_rx
);
input  prg_a14;
input  prg_a15;
input  prg_a16;
input  prg_a17;
input sampler_rx;

reg  prg_a14_expected;
reg  prg_a15_expected;
reg  prg_a16_expected;
reg  prg_a17_expected;

reg  prg_a14_prev;
reg  prg_a15_prev;
reg  prg_a16_prev;
reg  prg_a17_prev;

reg  prg_a14_expected_prev;
reg  prg_a15_expected_prev;
reg  prg_a16_expected_prev;
reg  prg_a17_expected_prev;

reg  last_prg_a14_exp;
reg  last_prg_a15_exp;
reg  last_prg_a16_exp;
reg  last_prg_a17_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	prg_a14_prev = prg_a14;
	prg_a15_prev = prg_a15;
	prg_a16_prev = prg_a16;
	prg_a17_prev = prg_a17;
end

// update expected /o prevs

always @(trigger)
begin
	prg_a14_expected_prev = prg_a14_expected;
	prg_a15_expected_prev = prg_a15_expected;
	prg_a16_expected_prev = prg_a16_expected;
	prg_a17_expected_prev = prg_a17_expected;
end



// expected prg_a14
initial
begin
	prg_a14_expected = 1'bX;
end 

// expected prg_a15
initial
begin
	prg_a15_expected = 1'bX;
end 

// expected prg_a16
initial
begin
	prg_a16_expected = 1'bX;
end 

// expected prg_a17
initial
begin
	prg_a17_expected = 1'bX;
end 
// generate trigger
always @(prg_a14_expected or prg_a14 or prg_a15_expected or prg_a15 or prg_a16_expected or prg_a16 or prg_a17_expected or prg_a17)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected prg_a14 = %b | expected prg_a15 = %b | expected prg_a16 = %b | expected prg_a17 = %b | ",prg_a14_expected_prev,prg_a15_expected_prev,prg_a16_expected_prev,prg_a17_expected_prev);
	$display("| real prg_a14 = %b | real prg_a15 = %b | real prg_a16 = %b | real prg_a17 = %b | ",prg_a14_prev,prg_a15_prev,prg_a16_prev,prg_a17_prev);
`endif
	if (
		( prg_a14_expected_prev !== 1'bx ) && ( prg_a14_prev !== prg_a14_expected_prev )
		&& ((prg_a14_expected_prev !== last_prg_a14_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prg_a14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prg_a14_expected_prev);
		$display ("     Real value = %b", prg_a14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_prg_a14_exp = prg_a14_expected_prev;
	end
	if (
		( prg_a15_expected_prev !== 1'bx ) && ( prg_a15_prev !== prg_a15_expected_prev )
		&& ((prg_a15_expected_prev !== last_prg_a15_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prg_a15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prg_a15_expected_prev);
		$display ("     Real value = %b", prg_a15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_prg_a15_exp = prg_a15_expected_prev;
	end
	if (
		( prg_a16_expected_prev !== 1'bx ) && ( prg_a16_prev !== prg_a16_expected_prev )
		&& ((prg_a16_expected_prev !== last_prg_a16_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prg_a16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prg_a16_expected_prev);
		$display ("     Real value = %b", prg_a16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_prg_a16_exp = prg_a16_expected_prev;
	end
	if (
		( prg_a17_expected_prev !== 1'bx ) && ( prg_a17_prev !== prg_a17_expected_prev )
		&& ((prg_a17_expected_prev !== last_prg_a17_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prg_a17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prg_a17_expected_prev);
		$display ("     Real value = %b", prg_a17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_prg_a17_exp = prg_a17_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UNROM_mst_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cpu_a14;
reg [3:0] cpu_d;
reg Ncpu_rom_cs;
reg Ncpu_rw;
// wires                                               
wire prg_a14;
wire prg_a15;
wire prg_a16;
wire prg_a17;

wire sampler;                             

// assign statements (if any)                          
UNROM_mst i1 (
// port map - connection between master ports and signals/registers   
	.cpu_a14(cpu_a14),
	.cpu_d(cpu_d),
	.Ncpu_rom_cs(Ncpu_rom_cs),
	.Ncpu_rw(Ncpu_rw),
	.prg_a14(prg_a14),
	.prg_a15(prg_a15),
	.prg_a16(prg_a16),
	.prg_a17(prg_a17)
);

// cpu_a14
initial
begin
	cpu_a14 = 1'b0;
	cpu_a14 = #100000 1'b1;
	cpu_a14 = #260000 1'b0;
	cpu_a14 = #80000 1'b1;
	cpu_a14 = #20000 1'b0;
	cpu_a14 = #180000 1'b1;
	cpu_a14 = #80000 1'b0;
end 

// cpu_d[0]
initial
begin
	cpu_d[0] = 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #50000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #30000 1'b1;
	cpu_d[0] = #30000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #30000 1'b0;
	cpu_d[0] = #30000 1'b1;
	cpu_d[0] = #30000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #40000 1'b0;
	cpu_d[0] = #40000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #30000 1'b1;
	cpu_d[0] = #40000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #30000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #20000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #40000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #20000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #30000 1'b0;
	cpu_d[0] = #10000 1'b1;
	cpu_d[0] = #10000 1'b0;
	cpu_d[0] = #10000 1'b1;
end 

// cpu_d[1]
initial
begin
	cpu_d[1] = 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #40000 1'b1;
	cpu_d[1] = #50000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #40000 1'b1;
	cpu_d[1] = #30000 1'b0;
	cpu_d[1] = #60000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #50000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #30000 1'b0;
	cpu_d[1] = #40000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #30000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #20000 1'b0;
	cpu_d[1] = #20000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
	cpu_d[1] = #70000 1'b1;
	cpu_d[1] = #30000 1'b0;
	cpu_d[1] = #10000 1'b1;
	cpu_d[1] = #10000 1'b0;
end 

// cpu_d[2]
initial
begin
	cpu_d[2] = 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #40000 1'b1;
	cpu_d[2] = #50000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #40000 1'b1;
	cpu_d[2] = #30000 1'b0;
	cpu_d[2] = #60000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #50000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #30000 1'b0;
	cpu_d[2] = #40000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #30000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #20000 1'b0;
	cpu_d[2] = #20000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
	cpu_d[2] = #70000 1'b1;
	cpu_d[2] = #30000 1'b0;
	cpu_d[2] = #10000 1'b1;
	cpu_d[2] = #10000 1'b0;
end 

// cpu_d[3]
initial
begin
	cpu_d[3] = 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #40000 1'b0;
	cpu_d[3] = #40000 1'b1;
	cpu_d[3] = #40000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #20000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #20000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #40000 1'b0;
	cpu_d[3] = #40000 1'b1;
	cpu_d[3] = #40000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #20000 1'b0;
	cpu_d[3] = #30000 1'b1;
	cpu_d[3] = #40000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #40000 1'b1;
	cpu_d[3] = #50000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #30000 1'b1;
	cpu_d[3] = #30000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #20000 1'b0;
	cpu_d[3] = #10000 1'b1;
	cpu_d[3] = #10000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #20000 1'b0;
	cpu_d[3] = #20000 1'b1;
	cpu_d[3] = #30000 1'b0;
	cpu_d[3] = #10000 1'b1;
end 

// Ncpu_rw
initial
begin
	Ncpu_rw = 1'b0;
	Ncpu_rw = #40000 1'b1;
	Ncpu_rw = #280000 1'b0;
	Ncpu_rw = #20000 1'b1;
	# 100000;
	repeat(3)
	begin
		Ncpu_rw = 1'b0;
		Ncpu_rw = #5000 1'b1;
		# 5000;
	end
	Ncpu_rw = 1'b0;
	Ncpu_rw = #5000 1'b1;
	Ncpu_rw = #105000 1'b0;
	Ncpu_rw = #40000 1'b1;
	Ncpu_rw = #120000 1'b0;
	Ncpu_rw = #20000 1'b1;
	Ncpu_rw = #220000 1'b0;
end 

// Ncpu_rom_cs
always
begin
	Ncpu_rom_cs = 1'b0;
	Ncpu_rom_cs = #20000 1'b1;
	#20000;
end 

UNROM_mst_vlg_sample_tst tb_sample (
	.cpu_a14(cpu_a14),
	.cpu_d(cpu_d),
	.Ncpu_rom_cs(Ncpu_rom_cs),
	.Ncpu_rw(Ncpu_rw),
	.sampler_tx(sampler)
);

UNROM_mst_vlg_check_tst tb_out(
	.prg_a14(prg_a14),
	.prg_a15(prg_a15),
	.prg_a16(prg_a16),
	.prg_a17(prg_a17),
	.sampler_rx(sampler)
);
endmodule

